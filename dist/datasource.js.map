{"version":3,"sources":["../src/datasource.js"],"names":["_","Utils","moment","PEPPERDATA_DATE_FORMAT","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","templateReplace","replace","query","rangeMs","range","from","subtract","to","valueOf","sample","Math","round","maxDataPoints","dashboardQuery","assign","s","format","e","tzo","utcOffset","promises","targets","filter","t","hide","map","target","qs","parseQueryString","rawDashboardQuery","each","value","key","param","datasourceRequest","method","headers","length","when","data","all","then","responses","response","transformPDResult","flatten","allSeries","series","seriesId","datapoints","dataPoints","point","status","message","title"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport * as Utils from './utils';\nimport moment from 'moment';\n\nconst PEPPERDATA_DATE_FORMAT = 'YYYY/MM/DD-HH:mm';\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    const templateReplace = query => this.templateSrv.replace(query, null, 'regex');\n    const rangeMs = moment(options.range.from).subtract(options.range.to).valueOf();\n    const sample = Math.round(rangeMs / options.maxDataPoints / 1000);\n    const dashboardQuery = _.assign({\n      s: templateReplace(options.range.from.format(PEPPERDATA_DATE_FORMAT)),\n      e: templateReplace(options.range.to.format(PEPPERDATA_DATE_FORMAT)),\n      tzo: options.range.from.utcOffset() /  60,\n      sample: sample\n    });\n    const promises = _(options.targets).filter(t => !t.hide).map((target) => {\n      var qs = Utils.parseQueryString(target.rawDashboardQuery);\n      _.each(qs, function(value, key) {\n        qs[key] = templateReplace(value)\n      });\n\n      const url = this.url + '/m?' + Utils.param(dashboardQuery)\n          + \"&\" + Utils.param(qs);\n      return this.backendSrv.datasourceRequest({\n        url,\n        method: 'GET',\n        headers: {'Content-Type': 'application/json'}\n      });\n    }).value();\n\n    if (promises.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.q.all(promises).then((responses) => {\n      return {\n        data: _(responses).map((response)=> {\n          return this.transformPDResult(response);\n        }).flatten().value()\n      };\n    });\n\n  }\n\n  transformPDResult(response) {\n    return _.map(response.data.data.allSeries, (series) => {\n      return {\n        target: series.seriesId,\n        datapoints: _.map(series.dataPoints, function (point) {\n          return point ? [point[1], point[0] * 1000] : [null, null]\n        })\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/m?m=tasks&sample=60000',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n    });\n  }\n\n  // annotationQuery(options) {\n  //   var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n  //   var annotationQuery = {\n  //     range: options.range,\n  //     annotation: {\n  //       name: options.annotation.name,\n  //       datasource: options.annotation.datasource,\n  //       enable: options.annotation.enable,\n  //       iconColor: options.annotation.iconColor,\n  //       query: query\n  //     },\n  //     rangeRaw: options.rangeRaw\n  //   };\n  //\n  //   return this.backendSrv.datasourceRequest({\n  //     url: this.url + '/annotations',\n  //     method: 'POST',\n  //     data: annotationQuery\n  //   }).then(result => {\n  //     return result.data;\n  //   });\n  // }\n\n  // metricFindQuery(options) {\n  //   var interpolated = {\n  //     target: this.templateSrv.replace(options.target, null, 'regex')\n  //   };\n  //\n  //   return this.backendSrv.datasourceRequest({\n  //     url: this.url + '/search',\n  //     data: interpolated,\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' }\n  //   }).then(this.mapToTextValue);\n  // }\n\n  // mapToTextValue(result) {\n  //   return _.map(result.data, (d, i) => {\n  //     return { text: d, value: i};\n  //   });\n  // }\n}\n"]}